<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\neutral;

use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\EntityAI;
use pocketmine\entity\Entity;
use pocketmine\entity\object\ItemEntity;
use pocketmine\event\inventory\InventoryPickupItemEvent;
use pocketmine\inventory\InventoryHolder;
use pocketmine\level\Level;
use pocketmine\network\mcpe\protocol\TakeItemEntityPacket;

class Item extends ItemEntity implements Collidable {
	public function entityBaseTick(int $tickDiff = 1) : bool {
		$this->checkNearEntities();
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}
	protected function checkNearEntities() {
		foreach($this->level->getNearbyEntities($this->boundingBox->expandedCopy(1, 0.5, 1), $this) as $entity) {
			$entity->scheduleUpdate();

			if(!$entity->isAlive() or $entity->isFlaggedForDespawn()) {
				continue;
			}

			if($entity instanceof Collidable)
				$entity->onCollideWithEntity($this);
		}
	}

	public function onCollideWithEntity(Entity $entity) : void {
		if($this->pickupDelay === 0 and $entity instanceof Item and $entity->onGround and mt_rand(1, 50) === 50) { // use randomness for delay before merge
			if($this->item->equals($entity->getItem()))
				$this->item->setCount($this->item->getCount() + $entity->getItem()->getCount());
			$entity->flagForDespawn();
			foreach($this->getViewers() as $player)
				$this->sendSpawnPacket($player);
			return;
		}
		if($this->pickupDelay !== 0 or !$entity instanceof \pocketmine\inventory\InventoryHolder or !$entity instanceof \jasonwynn10\VanillaEntityAI\entity\InventoryHolder or $this->level->getDifficulty() <= Level::DIFFICULTY_EASY) {
			return;
		}

		$chance = EntityAI::getInstance()->getRegionalDifficulty($entity->level, $entity->chunk);
		if($chance < 50)
			return;

		$item = $this->getItem();
		$inventory = $entity->getInventory();

		if(!$item instanceof Item or !$inventory->canAddItem($item)) {
			return;
		}

		$this->server->getPluginManager()->callEvent($ev = new InventoryPickupItemEvent($inventory, $this));
		if($ev->isCancelled()) {
			return;
		}

		$pk = new TakeItemEntityPacket();
		$pk->eid = $entity->getId();
		$pk->target = $this->getId();
		$this->server->broadcastPacket($this->getViewers(), $pk);

		if($entity instanceof \jasonwynn10\VanillaEntityAI\entity\InventoryHolder)
			$entity->setDropAll();
		$inventory->addItem(clone $item);

		$this->flagForDespawn();
	}
}