<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\task;

use jasonwynn10\VanillaEntityAI\data\BiomeEntityList;
use jasonwynn10\VanillaEntityAI\entity\MonsterBase;
use jasonwynn10\VanillaEntityAI\EntityAI;
use pocketmine\level\format\Chunk;
use pocketmine\level\Level;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\scheduler\AsyncTask;
use pocketmine\Server;

class HostileSpawnTask extends AsyncTask {
	/** @var string[][] $chunks */
	private $chunks = [];
	/** @var int[]|bool[] $entities */
	private $entities = [];

	/**
	 * HostileSpawnTask constructor.
	 */
	public function __construct() {
		foreach(Server::getInstance()->getLevels() as $level) {
			if($level->getDifficulty() < Level::DIFFICULTY_EASY) {
				continue;
			}
			foreach($level->getPlayers() as $player) {
				foreach($player->usedChunks as $hash => $sent) {
					if($sent) {
						Level::getXZ($hash, $chunkX, $chunkZ);
						$this->chunks[$level->getId()][$hash] = $player->getLevel()->getChunk($chunkX, $chunkZ, true)->fastSerialize();
						$this->entities[$level->getId()]+=1;
					}
				}
			}
		}
	}
	public function onRun() {
		/** @var Chunk[][] $chunks */
		$chunks = [];
		foreach($this->chunks as $levelId => $chunkArr)
			foreach($chunkArr as $chunk)
				$chunks[$levelId][] = Chunk::fastDeserialize($chunk);

		foreach($chunks as $levelId => $chunkArr) {
			if($this->entities[$levelId] > 200)
				continue;
			foreach($chunkArr as $chunk) {
				$packCenter = new Vector3(mt_rand($chunk->getX() << 4, (($chunk->getX() << 4) + 15)), mt_rand(0, 255), mt_rand($chunk->getZ() << 4, (($chunk->getZ() << 4) + 15)));
				$biomeId = $chunk->getBiomeId($packCenter->x & 0x0f, $packCenter->z & 0x0f);
				$entityId = BiomeEntityList::BIOME_HOSTILE_MOBS[$biomeId][array_rand(BiomeEntityList::BIOME_HOSTILE_MOBS[$biomeId])];
				$data = $chunk->getFullBlock($packCenter->x & 0x0f, $packCenter->y & 0x0f, $packCenter->z & 0x0f) & 0xfff;
				if() {
					for($attempts = 0, $currentPackSize = 0; $attempts <= 12 and $currentPackSize < 4; $attempts++) {
						$x = mt_rand(-20, 20) + $packCenter->x;
						$z = mt_rand(-20, 20) + $packCenter->z;
						foreach(EntityAI::$entities as $class => $arr) {
							if($class instanceof MonsterBase and $class::NETWORK_ID === $entityId) {
								$entity = $class::spawnMob(new Position($x + 0.5, $packCenter->y, $z + 0.5, $level));
								if($entity !== null) {
									$currentPackSize++;
								}
							}
						}
					}
				}
			}
		}
	}

	/**
	 * @param Server $server
	 */
	public function onCompletion(Server $server) {
		parent::onCompletion($server); // TODO: Change the autogenerated stub
	}
}